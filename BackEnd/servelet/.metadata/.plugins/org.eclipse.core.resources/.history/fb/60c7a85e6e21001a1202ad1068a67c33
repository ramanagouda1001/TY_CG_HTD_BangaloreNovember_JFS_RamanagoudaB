package com.capgemini.mywebapp.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.capgemini.mywebapp.bean.EmployeeInfoBean;

public class EmployeeDAOImpl implements EmployeeDAO {

	private EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("Test");

	@Override
	public EmployeeInfoBean search(int emp_id) {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EmployeeInfoBean bean = entityManager.find(EmployeeInfoBean.class, emp_id);
		entityManager.close();

		return bean;
	}

	@Override
	public EmployeeInfoBean authenticate(int empId, String Password) {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		String jpql = "from EmployeeInfoBean where emp_id=:empid and password=:password ";
		Query query = entityManager.createQuery(jpql);
		query.setParameter("empid", empId);
		query.setParameter("password", Password);

		EmployeeInfoBean bean = null;
		try {
			bean = (EmployeeInfoBean) query.getSingleResult();
		} catch (Exception e) {
			e.printStackTrace();
		}
		entityManager.close();
		return bean;
	}

	@Override
	public boolean add(EmployeeInfoBean bean) {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction transaction = entityManager.getTransaction();

		try {
			transaction.begin();
			entityManager.persist(bean);
			transaction.commit();
			entityManager.close();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		entityManager.close();

		return false;
	}

	@Override
	public boolean delete(int emp_id) {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction transaction = entityManager.getTransaction();

		try {
			transaction.begin();
			EmployeeInfoBean bean = entityManager.find(EmployeeInfoBean.class, emp_id);
			entityManager.remove(bean);
			transaction.commit();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		entityManager.close();

		return false;
	}

	@Override
	public boolean modify(EmployeeInfoBean bean) {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		EntityTransaction entityTransaction = entityManager.getTransaction();
		
		try {
			entityTransaction.begin();
			EmployeeInfoBean obj = entityManager.find(EmployeeInfoBean.class, bean.getEmp_id());
			obj.setName(bean.getName());
			obj.setSalary(bean.getSalary());
			obj.setAge(bean.getAge());
			obj.setDesignation(bean.getDesignation());
			entityTransaction.commit();
			return true;
		} catch (Exception e) { 
			e.printStackTrace();
		}
		entityManager.close();
		return false;
	}

	@Override
	public List<EmployeeInfoBean> getAllEmployee() {
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		String jpql = "from EmployeeInfoBean";
		Query query = entityManager.createQuery(jpql);
		List<EmployeeInfoBean> list=query.getResultList();
		entityManager.close();
		return list;
	}

}
